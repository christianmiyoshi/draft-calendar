{"version":3,"sources":["components/MonthView/index.tsx","App.tsx","utils/array/chunk.ts","reportWebVitals.ts","store/calendar/index.ts","store/index.ts","index.tsx"],"names":["MonthView","month","year","selectedDates","style","padding","marginBottom","CalendarAnnual","array","size","dates","Array","from","keys","map","m","Date","dateChunks","reduce","acc","_","i","push","slice","textAlign","fontSize","display","flexDirection","d","getYear","getMonth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","eventsByDate","color","date","SET_EVENT","DELETE_EVENT","calendarReducer","action","type","event","rootReducer","combineReducers","calendar","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAwBeA,EAZ8B,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAA8B,EAAxBC,cAE1D,OACE,qBAAKC,MAAO,CAACC,QAAS,OAAQC,aAAc,QAA5C,SACI,cAAC,IAAD,CACIL,MAAOA,EACPC,KAAMA,O,gBCTZK,EAA6C,SAAC,GAAc,ICTzCC,EAAWC,EDSkBP,EAAW,EAAXA,KAE9CQ,EADSC,MAAMC,KAAKD,MAAM,IAAIE,QACfC,KAAI,SAAAC,GAAC,OAAI,IAAIC,KAAKd,EAAMa,EAAG,MAE1CE,GCb4BR,EDYP,GCZJD,EDaEE,GCZVQ,QAAO,SAACC,EAAYC,EAAGC,GAEhC,OADIA,EAAIZ,IAAS,GAAGU,EAAIG,KAAKd,EAAMe,MAAMF,EAAGA,EAAIZ,IACzCU,IACN,KDWP,OAAO,gCACL,qBAAKf,MAAO,CAACoB,UAAW,SAAUC,SAAU,QAA5C,SAAsDvB,IAElDe,EAAWH,KAAI,SAAAJ,GAAK,OAClB,qBAAKN,MAAO,CAACsB,QAAS,OAAQC,cAAe,OAA7C,SACCjB,EAAMI,KAAI,SAAAc,GAAC,OACV,qBAAKxB,MAAO,CAACsB,QAAS,OAAQC,cAAe,UAA7C,SACE,cAAC,EAAD,CACEzB,KAAM2B,YAAQD,GACd3B,MAAO6B,YAASF,mBA2BjBG,MAhBf,WACE,OACE,gCACE,cAAC,EAAD,CACE7B,KAAM,OAER,cAAC,EAAD,CACEA,KAAM,OAER,cAAC,EAAD,CACEA,KAAM,WE/BC8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6BCERQ,EAA4B,CAC9BC,aAAc,CACV,aAAc,CAACC,MAAO,UAAWC,KAAM,gBAIlCC,EAAY,qBACZC,EAAe,wBA0BfC,EAAkB,WAAuD,IAAhCC,EAA+B,uCACjF,OAAOA,EAAOC,MACV,KAAKJ,EACD,OAAO,2BACAJ,GADP,IAEIC,aAAa,2BACND,EAAaC,cADR,kBAEPM,EAAOJ,KAAOI,EAAOE,UAGlC,KAAKJ,EACD,OAAO,2BACAL,GADP,IAEIC,aAAa,2BACND,EAAaC,cADR,kBAEPM,EAAOJ,KAAO,SAI/B,OAAOH,GC5DEU,EAAcC,YAAgB,CAACC,SAAUN,ICMhDO,EAAQC,YAAYJ,GAE1BK,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.1dc4e459.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'react-calendar/dist/Calendar.css';\nimport './style.css';\nimport { RootType } from '../../store';\nimport {ReactCustomInputDateCalendar} from 'react-custom-styled-calendar';\n\ntype MonthViewProps = {\n    month: number,\n    year: number,\n    selectedDates?: Date[]\n}\n\nconst MonthView : React.FC<MonthViewProps> = ({month, year, selectedDates = []}) => {\n\n  return (\n    <div style={{padding: '20px', marginBottom: '40px'}}>\n        <ReactCustomInputDateCalendar\n            month={month}\n            year={year}\n        />\n    </div>\n  );\n}\n\nexport default MonthView;\n","import React, { useState } from 'react';\nimport MonthView from './components/MonthView';\nimport { format, getMonth, getYear } from 'date-fns';\nimport { chunk } from './utils/array/chunk';\n\ninterface ICalendarAnnual {\n  year:number\n}\n\nconst CalendarAnnual : React.FC<ICalendarAnnual> = ({ year} ) => {\n  const months = Array.from(Array(12).keys());\n  const dates = months.map(m => new Date(year, m, 1));\n  const numberMonthsInLine = 4;\n  const dateChunks = chunk(dates, numberMonthsInLine);\n\n  return <div>\n    <div style={{textAlign: 'center', fontSize: '30px'}}>{year}</div>\n    {\n        dateChunks.map(dates => \n          <div style={{display: 'flex', flexDirection: 'row'}}>\n          {dates.map(d => \n            <div style={{display: 'flex', flexDirection: 'column'}}>\n              <MonthView \n                year={getYear(d)}\n                month={getMonth(d)}\n              />\n            </div>\n            \n          )}\n          </div>\n        )\n      }\n  </div>\n}\n\nfunction App() {\n  return (\n    <div>\n      <CalendarAnnual \n        year={2020}\n      />\n      <CalendarAnnual \n        year={2021}\n      />\n      <CalendarAnnual \n        year={2022}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","export const chunk = <T>(array:T[], size: number) => {\n    return array.reduce((acc: T[][], _, i) => {\n        if (i % size === 0) acc.push(array.slice(i, i + size))\n        return acc\n      }, []);    \n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type CalendarEvent = {\n    color: string,\n    date: string\n}\n\ntype InitialType = {\n    eventsByDate: {\n        '2021-01-01': CalendarEvent\n    }\n}\n\nconst initialState: InitialType = {\n    eventsByDate: {\n        '2021-01-01': {color: '#ff0022', date: '2021-01-01'}        \n    }\n}\n\nexport const SET_EVENT = 'calendar/SET_EVENT';\nexport const DELETE_EVENT = 'calendar/DELETE_EVENT';\n\nexport const setEvent = (event: CalendarEvent, date: string) => {\n    const type: typeof SET_EVENT = SET_EVENT;\n    return {\n        type,\n        event, \n        date\n    };\n}\n\ntype SetEventAction = ReturnType<typeof setEvent>;\n\nexport const deleteEvent = (date: string) => {\n    const type: typeof DELETE_EVENT = DELETE_EVENT;\n    return {\n        type,\n        date\n    };\n}\n\ntype SetDeleteAction = ReturnType<typeof deleteEvent>;\n\ntype CalendarActionType = SetEventAction | SetDeleteAction;\n\n\nexport const calendarReducer = (state = initialState, action: CalendarActionType) => {\n    switch(action.type){        \n        case SET_EVENT:\n            return {\n                ...initialState,\n                eventsByDate: {\n                    ...initialState.eventsByDate,\n                    [action.date]: action.event\n                }\n            };\n        case DELETE_EVENT:\n            return {\n                ...initialState,\n                eventsByDate: {\n                    ...initialState.eventsByDate,\n                    [action.date]: null\n                }\n            };\n    }\n    return initialState;\n}\n\n\nexport default {calendarReducer};","import {combineReducers} from 'redux';\nimport {calendarReducer} from './calendar';\n\nexport const rootReducer = combineReducers({calendar: calendarReducer});\n\nexport type RootType = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {rootReducer} from './store';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider> ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}